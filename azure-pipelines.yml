name: $(Date:yyyyMMdd).$(Rev:r)

parameters:
- name: Sign
  displayName: "Signed"
  type: boolean
  default: false
- name: Publish
  displayName: "Publish"
  type: boolean
  default: false
- name: PreTest
  displayName: "Pre test"
  type: boolean
  default: true
- name: PostTest
  displayName: "Post test"
  type: boolean
  default: true
- name: OverrideRef
  displayName: "Force version (else uses tag)"
  type: string
  default: (tag)
- name: TestSign
  displayName: "Test Signed"
  type: boolean
  default: false


variables:
  PIP_DISABLE_PIP_VERSION_CHECK: true
  PIP_NO_COLOR: true
  PIP_NO_INPUT: true
  PIP_PROGRESS_BAR: off
  PIP_REQUIRE_VIRTUALENV: false
  PIP_VERBOSE: true
  PYMSBUILD_VERBOSE: true
  PYMSBUILD_TEMP_DIR: $(Build.BinariesDirectory)
  DIST_DIR: $(Build.ArtifactStagingDirectory)
  LAYOUT_DIR: $(Build.BinariesDirectory)\layout
  TEST_MSIX_DIR: $(Build.BinariesDirectory)\test_msix
  ${{ if ne(parameters.OverrideRef, '(tag)') }}:
    OVERRIDE_REF: refs/tags/${{ parameters.OverrideRef }}


jobs:
- job: Build

  pool:
    vmImage: 'windows-latest'

  variables:
  - ${{ if eq(parameters.Sign, 'true') }}:
    - group: CPythonSign
  - ${{ if eq(parameters.TestSign, 'true') }}:
    - group: CPythonTestSign
  - ${{ if eq(parameters.Publish, 'true') }}:
    - group: PythonOrgPublish


  steps:
  - checkout: self

  - powershell: |
      # Ensure we aren't currently installed
      $msix = Get-AppxPackage PythonSoftwareFoundation.PythonManager -EA SilentlyContinue
      if ($msix) {
        Remove-AppxPackage $msix
      }
    displayName: 'Remove existing PyManager install'

  - task: NugetToolInstaller@0
    displayName: 'Install Nuget'

  - powershell: |
      nuget install -o host_python -x -noninteractive python
      Write-Host "##vso[task.prependpath]$(gi host_python\python\tools)"
    displayName: 'Install host Python'
    workingDirectory: $(Build.BinariesDirectory)

  - powershell: |
      python -m pip install pymsbuild
    displayName: 'Install build dependencies'

  - ${{ if eq(parameters.PreTest, 'true') }}:
    - powershell: |
        python -m pip install pytest
      displayName: 'Install test runner'

    - powershell: |
        python -m pymsbuild -c _msbuild_test.py
      displayName: 'Build test module'

    - powershell: |
        python -m pytest -vv
      displayName: 'Run pre-test'

  - ${{ if or(eq(parameters.Sign, 'true'), eq(parameters.TestSign, 'true')) }}:
    - powershell: |
        dotnet tool install --global --prerelease sign
        cd (mkdir -Force signing)
        "*.exe", "*.pyd" | Out-File -Encoding UTF8 "signlist1.txt"
        Write-Host "##vso[task.setvariable variable=SIGNLIST1]$(gi signlist1.txt)"
        "*.msix" | Out-File -Encoding UTF8 "signlist2.txt"
        Write-Host "##vso[task.setvariable variable=SIGNLIST2]$(gi signlist2.txt)"
        "*.msi" | Out-File -Encoding UTF8 "signlist3.txt"
        Write-Host "##vso[task.setvariable variable=SIGNLIST3]$(gi signlist3.txt)"
      displayName: 'Install signing tool and generate files'
      workingDirectory: $(Build.BinariesDirectory)

  - powershell: |
      python make.py
    displayName: 'Build package'
    env:
      PYMSBUILD_LAYOUT_DIR: $(LAYOUT_DIR)
      PYMSBUILD_DIST_DIR: $(DIST_DIR)
      ${{ if or(eq(parameters.Sign, 'true'), eq(parameters.TestSign, 'true')) }}:
        PYMANAGER_APPX_PUBLISHER: $(TrustedSigningCertificateSubject)

  - ${{ if or(eq(parameters.Sign, 'true'), eq(parameters.TestSign, 'true')) }}:
    - powershell: >
        dir -r *.exe, *.pyd | %{
        sign code trusted-signing "$_"
        -fd sha256 -t http://timestamp.acs.microsoft.com -td sha256
        -tse "$(TrustedSigningUri)" -tsa "$(TrustedSigningAccount)" -tscp "$(TrustedSigningCertificateName)"
        -d "PyManager $(Build.BuildNumber)"
        -fl $env:SIGNLIST1
        }
      displayName: 'Sign binaries'
      workingDirectory: $(LAYOUT_DIR)
      env:
        AZURE_CLIENT_ID: $(TrustedSigningClientId)
        AZURE_CLIENT_SECRET: $(TrustedSigningSecret)
        AZURE_TENANT_ID: $(TrustedSigningTenantId)

  - powershell: |
      python make-msix.py
    displayName: 'Build MSIX package'
    env:
      PYMSBUILD_LAYOUT_DIR: $(LAYOUT_DIR)
      PYMSBUILD_DIST_DIR: $(DIST_DIR)
      ${{ if or(eq(parameters.Sign, 'true'), eq(parameters.TestSign, 'true')) }}:
        PYMANAGER_APPX_PUBLISHER: $(TrustedSigningCertificateSubject)
      PYMANAGER_APPX_STORE_PUBLISHER: 'CN=4975D53F-AA7E-49A5-8B49-EA4FDC1BB66B'

  - powershell: |
      python make-msi.py
    displayName: 'Build MSI package'
    env:
      PYMSBUILD_LAYOUT_DIR: $(LAYOUT_DIR)
      PYMSBUILD_DIST_DIR: $(DIST_DIR)
      ${{ if or(eq(parameters.Sign, 'true'), eq(parameters.TestSign, 'true')) }}:
        PYMANAGER_APPX_PUBLISHER: $(TrustedSigningCertificateSubject)

  - ${{ if or(eq(parameters.Sign, 'true'), eq(parameters.TestSign, 'true')) }}:
    - powershell: >
        dir *.msix | %{
        sign code trusted-signing "$_"
        -fd sha256 -t http://timestamp.acs.microsoft.com -td sha256
        -tse "$(TrustedSigningUri)" -tsa "$(TrustedSigningAccount)" -tscp "$(TrustedSigningCertificateName)"
        -d "PyManager $(Build.BuildNumber)"
        -fl $env:SIGNLIST2
        }
      displayName: 'Sign MSIX package'
      workingDirectory: $(DIST_DIR)
      env:
        AZURE_CLIENT_ID: $(TrustedSigningClientId)
        AZURE_CLIENT_SECRET: $(TrustedSigningSecret)
        AZURE_TENANT_ID: $(TrustedSigningTenantId)

    - powershell: >
        dir *.msi | %{
        sign code trusted-signing "$_"
        -fd sha256 -t http://timestamp.acs.microsoft.com -td sha256
        -tse "$(TrustedSigningUri)" -tsa "$(TrustedSigningAccount)" -tscp "$(TrustedSigningCertificateName)"
        -d "PyManager $(Build.BuildNumber)"
        -fl $env:SIGNLIST3
        }
      displayName: 'Sign MSI package'
      workingDirectory: $(DIST_DIR)
      env:
        AZURE_CLIENT_ID: $(TrustedSigningClientId)
        AZURE_CLIENT_SECRET: $(TrustedSigningSecret)
        AZURE_TENANT_ID: $(TrustedSigningTenantId)

  - publish: $(DIST_DIR)
    artifact: dist
    displayName: Publish distribution artifacts

  - ${{ if eq(parameters.PostTest, 'true') }}:
    - ${{ if or(eq(parameters.Sign, 'true'), eq(parameters.TestSign, 'true')) }}:
      - powershell: |
          $msix = dir "$(DIST_DIR)\*.msix" | ?{ -not ($_.BaseName -match '.+-store') } | select -first 1
          Add-AppxPackage $msix
          Get-AppxPackage PythonSoftwareFoundation.PythonManager
        displayName: 'Install signed MSIX'

    - ${{ else }}:
      - powershell: |
          $msix = dir "$(DIST_DIR)\*.msix" | ?{ -not ($_.BaseName -match '.+-store') } | select -first 1
          cp $msix "${msix}.zip"
          Expand-Archive "${msix}.zip" (mkdir -Force $env:TEST_MSIX)
          Add-AppxPackage -Register "${env:TEST_MSIX}\appxmanifest.xml"
          Get-AppxPackage PythonSoftwareFoundation.PythonManager
        displayName: 'Register unsigned MSIX'
        env:
          TEST_MSIX: $(TEST_MSIX_DIR)

    - powershell: |
        gcm pymanager
        gcm pymanagerw
        # These are likely present due to the machine configuration,
        # but we'll check for them anyway.
        gcm py
        gcm python
        gcm pyw
        gcm pythonw
      displayName: 'Ensure global commands are present'

    - powershell: |
        pymanager
      displayName: 'Show help output'

    - powershell: |
        pymanager install -vv default
      displayName: 'Install default runtime'

    - powershell: |
        pymanager list -vv
      displayName: 'List installed runtimes'

    - powershell: |
        pymanager exec -m site
      displayName: 'Launch default runtime'

    - powershell: |
        $i = (mkdir -force test_installs)
        ConvertTo-Json @{
            install_dir="$i";
            download_dir="$i\_cache";
            global_dir="$i\_bin";
        } | Out-File $env:PYTHON_MANAGER_CONFIG -Encoding utf-8
        pymanager exec
      displayName: 'Emulate first launch'
      env:
        PYTHON_MANAGER_INCLUDE_UNMANAGED: false
        PYTHON_MANAGER_CONFIG: .\test-config.json

    - powershell: |
        pymanager list -vv --online 3 3-32 3-64 3-arm64
        pymanager install -vv --download .\bundle 3 3-32 3-64 3-arm64
        pymanager list -vv --source .\bundle
        pymanager install -vv --source .\bundle 3 3-32 3-64 3-arm64
      displayName: 'Offline bundle download and install'

    - powershell: |
        Get-AppxPackage PythonSoftwareFoundation.PythonManager | Remove-AppxPackage
      displayName: 'Remove MSIX'

  - ${{ if and(eq(parameters.Publish, 'true'), or(eq(parameters.Sign, 'true'), eq(parameters.TestSign, 'true'))) }}:
    - powershell: |
        Write-Host "TODO: Publish packages"
      displayName: 'TODO: Publish packages'
